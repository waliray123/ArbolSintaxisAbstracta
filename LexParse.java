/* Generated By:JavaCC: Do not edit this line. LexParse.java */
import java.util.ArrayList;
import java.util.List;

public class LexParse implements LexParseConstants {



  static List<Nodo> listaNodos;
  static Nodo nodoPadreTodos;
  static int numNodo;

  public static void main(String args[]) throws ParseException {
    nodoPadreTodos = null;
    numNodo = 0;
    listaNodos = new ArrayList<Nodo>();

    LexParse parser = new LexParse(System.in);
    parser.Input();
  }

  public static void generarNotacionPostFija(){
    NotPostFija notacion = new NotPostFija(nodoPadreTodos);
    notacion.generarNotacion();
    String notacionStr = notacion.getNotacion();
    System.out.println(notacionStr);
  }

  public static void generarDot(){
    Arbol arbol = new Arbol();
    arbol.generarArbol(nodoPadreTodos);
  }

  public static void insertarPadreTodos(int numNodoP){
    Nodo nodoIns = buscarNodo(numNodoP);
    nodoPadreTodos = nodoIns;
  }

  public static void generarUnion(int numNodo1,int numNodo2,String simbolo){
    Nodo nodoSim = crearNodo(simbolo);
    Nodo nodo1 = buscarNodo(numNodo1);
    Nodo nodo2 = buscarNodo(numNodo2);
    nodoSim.insertarNodoHijo(nodo1);
    nodoSim.insertarNodoHijo(nodo2);
    nodo1.insertarNodoPadre(nodoSim);
    nodo2.insertarNodoPadre(nodoSim);
  }

  public static Nodo crearNodo(String val){
    numNodo += 1;
    Nodo nodoNuevo = new Nodo(val,numNodo);
    listaNodos.add(nodoNuevo);
    return nodoNuevo;
  }

  public static Nodo buscarNodo(int numNodo){
    for (Nodo nodoI : listaNodos) {
      if(nodoI.getNumNodo() == numNodo){
        return nodoI;
      }
    }
    return null;
  }

  static final public void Input() throws ParseException {
  int valI;
    valI = Inicio();
    jj_consume_token(0);
                        insertarPadreTodos(valI);
                                                   generarDot();
                                                                  generarNotacionPostFija();
  }

  static final public int Inicio() throws ParseException {
  int valS;
  int valIp;
    valS = Siguiente();
    valIp = Iniciop(valS);
                                         {if (true) return valIp;}
    throw new Error("Missing return statement in function");
  }

  static final public int Iniciop(int val) throws ParseException {
  int exp1 = val;
  int valS;
  int valIp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAS:
      jj_consume_token(MAS);
      valS = Siguiente();
      valIp = Iniciop(valS);
                                              generarUnion(exp1,valIp,"+");
                                                                             {if (true) return numNodo;}
      break;
    default:
      jj_la1[0] = jj_gen;
   {if (true) return exp1;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public int Siguiente() throws ParseException {
  int valE;
  int valSp;
    valE = Expresion();
    valSp = Siguientep(valE);
                                           {if (true) return valSp;}
    throw new Error("Missing return statement in function");
  }

  static final public int Siguientep(int val) throws ParseException {
  int exp1 = val;
  int valS;
  int valSp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
      jj_consume_token(POR);
      valS = Siguiente();
      valSp = Siguientep(valS);
                                                 generarUnion(exp1,valSp,"*");
                                                                                {if (true) return numNodo;}
      break;
    default:
      jj_la1[1] = jj_gen;
   {if (true) return exp1;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public int Expresion() throws ParseException {
  int val;
  Token ident;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      ident = jj_consume_token(IDENTIFICADOR);
                         crearNodo(ident.image);
                                                  {if (true) return numNodo;}
      break;
    case NUM:
      ident = jj_consume_token(NUM);
               crearNodo(ident.image);
                                        {if (true) return numNodo;}
      break;
    case PARI:
      jj_consume_token(PARI);
      val = Inicio();
      jj_consume_token(PARD);
                              {if (true) return val;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LexParseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x800,0x1240,};
   }

  /** Constructor with InputStream. */
  public LexParse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LexParse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LexParse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LexParse(LexParseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
